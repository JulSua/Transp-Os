package com.example.musictest;

import org.jfugue.player.Player;

import javax.sound.midi.MidiSystem;
import javax.sound.midi.Synthesizer;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

public class UploadPage {
    private JPanel uploadPage;
    private JButton backButton;
    private JButton getFileButton;
    private JButton playButton;
    private JLabel problemMessage;
    private static JFrame frame;
    private static final int FRAME_HEIGHT = 500;
    private static final int FRAME_WIDTH = 500;

    /**
     * Initializes a new Player object.
     */
    public Player player = new Player();

    /**
     * Instances variable for the File that will be uploaded
     */
    public java.io.File inputFile;

    /**
     * Initializes UploadPage screen to the desired specifications.
     */
    public static void MainUpload() {
        frame = new JFrame("Transp-Os");
        frame.setContentPane(new UploadPage().uploadPage);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Dimension dimension = new Dimension();
        dimension.height = FRAME_HEIGHT;
        dimension.width = FRAME_WIDTH;
        frame.setMinimumSize(dimension);
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * Constructor that initializes all of the buttons used on this page.
     */
    public UploadPage() {
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                app.mainScreen();
                // Makes UploadPage gui invisible when main screen is opened.
                frame.setVisible(false);
            }
        });
        getFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                OpenFile of = new OpenFile();
                try {
                    of.opener();
                } catch (Exception exception) {
                    //Autogenerated catch block
                    exception.printStackTrace();
                }

                inputFile = of.file;

                if (inputFile == null) {
                    problemMessage.setText("No file uploaded");
                } else if (!checkFileValidity(inputFile)) {
                    problemMessage.setText("Invalid file");
                } else {
                    problemMessage.setText(inputFile.toString());
                }
            }
        });
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Plays selected file
                playFile(inputFile);
            }
        });
    }

    /**
     * Checks if File is a MIDI file.
     * @param file that will be checked.
     * @return if File is a MIDI file or not.
     */
    public boolean checkFileValidity(File file) {
        String fileString = file.getName();
        String[] fileArray = fileString.split("\\.");
        return fileArray[fileArray.length - 1].equals("mid");
    }

    /**
     * Function that plays the MIDI file.
     * @param input is the MIDI file that is uploaded by user.
     */
    public void playFile(File input) {
        if (input != null && checkFileValidity(input)) {
            Synthesizer synthesizer = null;
            javax.sound.midi.Sequencer sequencer = null;
            InputStream inputStream = null;
            try {
                synthesizer = MidiSystem.getSynthesizer();
                synthesizer.open();
                synthesizer.loadAllInstruments(synthesizer.getDefaultSoundbank());

                sequencer = MidiSystem.getSequencer(false);
                sequencer.open();
                sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                inputStream = new BufferedInputStream(new FileInputStream(input));
                sequencer.setSequence(inputStream);

                org.jfugue.player.SequencerManager.getInstance().setSequencer(sequencer);
                player.play(sequencer.getSequence());
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                synthesizer.close();
                sequencer.close();
            }
        }
    }
}
