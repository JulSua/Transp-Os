package com.example.musictest;

import jdk.internal.org.objectweb.asm.commons.StaticInitMerger;
import jdk.internal.util.xml.impl.Input;
import org.jfugue.player.ManagedPlayer;
import org.jfugue.player.Player;

import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Receiver;
import javax.sound.midi.Synthesizer;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

public class UploadPage {
    private JPanel uploadPage;
    private JButton backButton;
    private JButton getFileButton;
    private JButton playButton;
    private JLabel ifNullLabel;
    private JButton pauseButton;
    private JButton resumeButton;
    private JButton resetButton;
    private static JFrame frame;
    public Player player = new Player();
    public java.io.File inputFile;

    public static void MainUpload() {
        frame = new JFrame("MusicTest");
        frame.setContentPane(new UploadPage().uploadPage);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Dimension dimension = new Dimension();
        dimension.height = 500;
        dimension.width = 500;
        frame.setMinimumSize(dimension);
        frame.pack();
        frame.setVisible(true);
    }
    public UploadPage() {
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                app.mainScreen();
                frame.setVisible(false);
            }
        });
        getFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                OpenFile of = new OpenFile();
                try {
                    of.Opener();
                } catch (Exception exception) {
                    //Autogenerated catch block
                    exception.printStackTrace();
                }
                // new input text
                inputFile = of.file;
                ifNullLabel.setVisible(inputFile == null);
            }
        });
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                playFile(inputFile);
            }
        });
        pauseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                player.getManagedPlayer().pause();
            }
        });
        resumeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                player.getManagedPlayer().resume();
            }
        });
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                player.getManagedPlayer().reset();
            }
        });
    }
    public void playFile(File input) {
        System.out.println(input);
        Synthesizer synthesizer = null;
        javax.sound.midi.Sequencer sequencer = null;
        InputStream inputStream = null;
        if (input != null) {
            try {
                synthesizer = MidiSystem.getSynthesizer();
                synthesizer.open();
                synthesizer.loadAllInstruments(synthesizer.getDefaultSoundbank());

                sequencer = MidiSystem.getSequencer(false);
                sequencer.open();
                sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                inputStream = new BufferedInputStream(new FileInputStream(input));
                sequencer.setSequence(inputStream);

                org.jfugue.player.SequencerManager.getInstance().setSequencer(sequencer);
                player.play(sequencer.getSequence());
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                synthesizer.close();
                sequencer.close();
            }
        }
    }
}
